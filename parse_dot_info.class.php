<?php

/**
 * @class dot_info takes the contents of an info file and converts
 *			 it to a multi dimensional array, who's values are set to
 *			 the most appropriate data type.
 */

class dot_info
{
	/**
	 * @ver array $contents the contents of a .info file (can be up
	 *		to 5 levels deep)
	 */
	protected $content = array();

	/**
	 * @var string $last_error the last error message generated by
	 *		dot_info, when in "Don't throw error" mode
	 */
	protected $last_error = '';

	/**
	 * @var boolean $throw_error whether or not to throw an exception when an error is encountered
	 */
	protected $throw_error = true;

	protected $case_func = 'make_lower_case';

	protected $updated = false;

	protected $add_func = 'add_nothing';
	protected $sort_added_func = 'just_sort';

	protected $merge_func = 'EDI__array_merge_new_only';
	
	const MATCH_CASE = 'match_case';
	const IGNORE_CASE = 'ignore_case';
	const STORE_ERROR = 'store_errors';
	const STORE_ERRORS = 'store_errors';
	const THROW_ERROR = 'throw_errors';
	const THROW_ERRORS = 'throw_errors';
	const READ_ONLY = 'readonly';
	const ADD_NEW_ONLY = 'add_new_only';
	const OVERWRITE = 'overwrite';


	/**
	 * @param  string   $info_content  contents of or path to a *.info
	 *					file.
	 * @param  boolean  [$case_sensitive = dot_info::IGNORE_CASE]
	 *					whether or not the care about case of
	 *					properties/keys when calling
	 *					dot_info::info_exists() and
	 *					dot_info::get_info()
	 *					dot_info::IGNORE_CASE ignore case of string keys
	 *					dot_info::MATCH_CASE care about case of
	 *						string keys
	 * @param  boolean  [$dont_throw_on_error = dot_info::THROW_ERRORS]
	 *					whether or not to throw an exception if
	 *					there's an error
	 *					dot_info::THROW_ERRORS when encountering
	 *						errors throw an exception
	 *					dot_info::STORE_ERRORS when encountering
	 *						errors save it to dot_info::$last_error
	 *						for later retreival by dot_info::get_last_error()
	 * @param  string   [$read_write = dot_info::READ_ONLY] read/write
	 *					status of object.
	 *					dot_info::READ_ONLY only read items.
	 *						CANNOT write/overwrite new values
	 *					dot_info::ADD_NEW_ONLY only new items can be
	 *						added. Existing items can NOT be over-written
	 *					dot_info::OVERWRITE new items can be added
	 *						and possilby over-writing the existing
	 *						value of a key/value pair
	 * @return dot_info object
	 */
	public function __construct( $info_content ) {

// ================================================
// START: applying options

		$sep = '';
		$num_args = func_num_args();
		if( $num_args > 1 ) {
			$sep = '';
			$final = "\n\tvalid dot_info constants:\n\t\tdot_info::MATCH_CASE,\n\t\tdot_info::STORE_ERRORS,\n\t\tdot_info::ADD_NEW_ONLY,\n\t\tdot_info::OVERWRITE";
			for( $a = 1 ; $a < $num_args ; $a += 1 )
			{
				$prefix = "dot_info::__construct() expects option $a to be the value of a dot_info constant. ";
				$param = func_get_arg($a);
				if( !is_string($param) ) {
					$suffix = '';
					if( is_numeric($param) ) { $msg = '"'.$param.'"'; }
					elseif( $param === true) { $msg = 'boolean TRUE'; }
					elseif( $param === false) { $msg = 'boolean FALSE'; }
					else { $msg = gettype($param); }

					$msg = $prefix.$suffix.' given.';
					if( $this->throw_error ) {
						throw new exception($msg.$final);	
					} else {
						$this->last_error .= $sep.$msg;
						$sep = "\n";
						continue;
					}
				}
				$param = preg_replace('`[^a-z]+`','',strtolower($param));
				switch($param) {
					case 'storeerrors':
						$this->throw_error = false;
						break;
					case 'matchcase':
						$this->case_func = 'case_sensitive';
						break;
					case 'overwrite':
						$this->merge_func = 'EDI__array_merge';
						// deliberately not breaking here because we need to set dot_info::$merge_func
					case 'addnewonly':
						$this->add_func = 'add_new';
						$this->sort_added_func = 'sort_or_report';
						break;
					default:
						$msg = "$prefix\"$param\" given.";
						if( $this->throw_error ) {
							throw new exception($msg.$final);	
						} else {
							$this->last_error .= $sep.$msg;
							$sep = "\n";
							continue;
						}
				}
				unset($msg,$prefix,$param);
			}
			if( $this->last_error !== '' ) {
				$this->last_erro .= $final;
			}
		}
		unset($num_args);

// END: applying options
// ================================================

		if( !is_string($info_content) ) {
			$msg = 'dot_info() expectes first parameter to be a string. '.gettype($info_content).' given';
			if( $this->throw_error ) {
				throw new exception($msg);
			} else {
				$this->last_error .= $sep.$msg;
				$sep = "\n";
				$info_content = '';
			}
			unset($msg);
		}

		if( $info_content !== '' && is_file($info_content) && strtolower(trim($info_content)) !== 'debug.info' ) {
			$info_content = file_get_contents($info_content);
		}

		$info_regex = '`
(?<=^|[\n\r])
([^;\n\r^\[=:]+)+?	#1 $key
(?:
	(?:
		(?|
			\[
				(?|
					\'([^\']+)\'	#2 $key[\'v\']
				|
					"([^"]+)"		#2 $key["v"]
				|
					([^\]]+)		#2 $key[v]
				)
			\]
		|
			(\[\])					#2 $key[]
		)
		(?:
			(?|
				\[
					(?|
						\'([^\']+)\'	#3 $key[\'v\'][\'w\']
					|
						"([^"]+)"		#3 $key["v"]["w"]
					|
						([^\]]+)		#3 $key[v][w]
					)
				\]
			|
				(\[\])					#3 $key[v][]
			)
			(?:
				(?|
					\[
						(?|
							\'([^\']+)\'	#4 $key[\'v\'][\'w\'][\'x\']
						|
							"([^"]+)"		#4 $key["v"]["w"]["x"]
						|
							([^\]]+)		#4 $key[v][w][x]
						)
					\]
				|
					(\[\])					#4 $key[v][w][]
				)
				(?:
					(?|
						\[
							(?|
								\'([^\']+)\'	#5 $key[\'v\'][\'w\'][\'x\'][\'y\']
							|
								"([^"]+)"		#5 $key["v"]["w"]["x"]["y"]
							|
								([^\]]+)		#5 $key[v][w][x][y]
							)
						\]
					|
						(\[\])					#5 $key[v][w][x][]
					)
					(?|
						\[
							(?|
								\'([^\']+)\'	#6 $key[\'v\'][\'w\'][\'x\'][\'y\'][\'z\']
							|
								"([^"]+)"		#6 $key["v"]["w"]["x"]["y"]["z"]
							|
								([^\]]+)		#6 $key[v][w][x][y][z]
							)
						\]
					|
						(\[\])					#6 $key[v][w][x][y][]
					)?
				)?
			)?
		)?
	)?
)?
\s*[=:]\s*
(?|
	\'
	(.*?)	#7 $value
	(?<!\\\\)
	(\')
|
	"
	(.*?)	#7 $value
	(?<!\\\\)
	(")
|
	(.*?)	#7 $value
	(?<!\\\\)
	(?=([;\r\n])|$)
)
`isx';
		if( preg_match_all( $info_regex , $info_content , $key_value , PREG_SET_ORDER) ) {
			for( $a = 0 ; $a < count($key_value) ; $a += 1 ) {
				$key0 = $this->{$this->case_func}($this->auto_settype($key_value[$a][1]));
				$value = $this->auto_settype($key_value[$a][7]);

				for( $b = 6 ; $b > 1 ; $b -= 1 ) {
					$key = $this->{$this->case_func}($key_value[$a][$b]);
					if( $key === '' ) {
						continue;
					} elseif( $key === '[]' ) {
						$value = array($value);
					} else {
						$value = array( $key => $value );
					}
				}

				if( isset($this->content[$key0]) ) {
					$this->content[$key0] = $this->EDI__array_merge($this->content[$key0],$value);
				} else {
					$this->content[$key0] = $value;
				}
			}
		}
		
		if( empty($this->content) ) {
			$msg = 'first parameter of dot_info::__construct() must be either the contents of, or path to a .info file. Nothing was found in "'.$info_content.'".';
			if( $this->throw_error ) {
				throw new exception($msg);
			} else {
				$this->last_error .= $sep.$msg;
			}
		}

		ksort($this->content);
	}


	/**
	 * @function get_info() returns either everything stored in
	 *			 dot_info::$content or one of the decendant
	 *			 indexes as specified by the number of parameters
	 *			 passed.
	 *
	 * [ @param string numeric primary index
	 *  [ @param string numeric secondary index
	 *   [ @param string numeric tertiary index
	 *    [ @param string numeric quaternary index
	 *     [ @param string numeric quinary index
	 *      [ @param string numeric senary index
	 * ]]]]]]
	 * @return mixed 
	 */
	public function get_info() {
		$output = $this->content;
		$num_args = func_num_args();
		if( $num_args > 0 ) {
			$indexes = func_get_args();
			for( $a = 0 ; $a < $num_args ; $a += 1 ) {
				$key = $this->{$this->case_func}($indexes[$a]);
				if( ( is_string($key) || is_numeric($key) ) && isset($output[$key]) ) {
					$output = $output[$key];
				} else {
					$invalid = $this->key_is_invalid($key,$output,$a,$indexes);
					if($this->throw_error) {
						throw new exception($invalid);
					} else {
						$this->last_error = $invalid;
					}
				}
			}
		}
		return $output;
	}


	/**
	 * @function info_exists() tests whether a given property is set.
	 *
	 * NOTE: dot_info::info_exists() never throws an error regardless
	 *		 of what is passed in.
	 *
	 * [ @param string numeric primary index
	 *  [ @param string numeric secondary index
	 *   [ @param string numeric tertiary index
	 *    [ @param string numeric quaternary index
	 *     [ @param string numeric quinary index
	 *      [ @param string numeric senary index
	 * ]]]]]]
	 * @return boolean 
	 */
	public function info_exists() {
		$output = $this->content;
		$num_args = func_num_args();
		if( $num_args > 0 ) {
			$indexes = func_get_args();
			for( $a = 0 ; $a < $num_args ; $a += 1 ) {
				$key = $this->{$this->case_func}($indexes[$a]);
				if( ( is_string($key) || is_numeric($key) ) && isset($output[$key]) ) {
					$output = $output[$key];
				} else {
					return false;
				}
			}
		}
		return true;
	}
	
	/**
	 * @function get_last_error() returns the last error message
	 *			 generated by the most recent
	 *			 dot_info::get_info() request for an invalid
	 *			 property.
	 * @return string the last error message (if any)
	 */
	public function get_last_error() {
		$output = $this->last_error;
		$this->last_error = '';
		return $output;
	}


	/**
	 * @function get_info_count() returns the number of info
	 * 			 key/value pairs in object
	 * @return integer number of info key/value pairs in object
	 */
	public function get_info_count() {
		return count($this->content);
	}


	/**
	 * @function add_info() adds new values to dot_info
	 *
	 * @param string,integer,float,boolean $value new value to be added to dot_info
	 * @param string,integer,float dot_info property to be added to
	 * [ @param string numeric secondary index
	 *  [ @param string numeric tertiary index
	 *   [ @param string numeric quaternary index
	 *    [ @param string numeric quinary index
	 *     [ @param string numeric senary index
	 * ]]]]]
	 * @return boolean 
	 */
	public function add_info( $value , $prop ) {
		return $this->{$this->add_func}(func_get_args());
	}


// END: public methods
// ========================================================
// START: protected methods




	/**
	 * @function add_nothing() is the workhorse when dot_info is in
	 *			 read only mode. It does absolutely nothing
	 * @param	array $input a list of values supplied to the parent
	 *			method via func_get_args()
	 * @return	boolean always false;
	 */
	protected function add_nothing( $input ) {
		return false;
	}

	
	/**
	 * @function add_new() is the workhorse when dot_info is in
	 *			 "add new only" or "overwrite" mode.
	 *			 In "add new only mode", it adds supplied items if
	 *			 they their indexes don't conflict with existing
	 *			 items.
	 *			 In "overwrite" mode, it adds supplied items
	 *			 regardless of whether their indexes conflict with
	 *			 existing items.
	 * @param	array $input a list of values supplied to the parent
	 *			method via func_get_args()
	 * @return	boolean always false;
	 */
	protected function add_new( $input ) {
		$this->last_error = '';
		$this->updated = false;

		$value = array_shift($input);
		if( !is_string($value) && !is_numeric($value) && !is_bool($value) ) {
			$this->last_error = 'dot_info::add_info() expects first parameter to be a string, numeric or boolean. '.gettype($value).' given.';
			return false;
		}
		$value_ = $value = $this->auto_settype($value);
		$key0 = array_shift($input);
		$invalid = $this->key_is_invalid( $key0 , $value , 0 , array($key0) , false );
	
		if( $invalid === '' ) {
			$num_args = count($input);

			if( $num_args > 0 )
			{
				for( $a = $num_args - 1 ; $a >= 0 ; $a -= 1 ) {
					$invalid = $this->key_is_invalid( $input[$a] , $value , $a , $input , false );
					if( $invalid === '' ) {
						$input[$a] = $key = $this->{$this->case_func}($this->auto_settype($input[$a]));
						$value = array( $key => $value );
					} else {
						$this->last_error = $invalid;
						return false;
					}
				}
			}
			if( isset($this->content[$key0]) ) {
				$this->content[$key0] = $this->{$this->merge_func}($this->content[$key0],$value);
			} else {
				$this->content[$key0] = $this->fix_square($value,false);
				$this->updated = true;
			}
		} else {
			$this->last_error = $invalid;
			return false;
		}

		$this->{$this->sort_added_func}($value_,$input,$num_args);

		return $this->updated;
	}

	protected function just_sort( $value , $input , $num_args ) {
		if( $this->updated ) {
			ksort($this->content);
		}
	}
	protected function sort_or_report( $value , $input , $num_args ) {
		if( $this->updated ) {
			ksort($this->content);
		} elseif( substr($this->last_error,0,8) === '[EXISTS]' ) {
			$key = $this->auto_settype(substr($this->last_error,8));
			$op = '$';
			$cl = '';
			$this->last_error = '';
			for( $a = 0 ; $a < $num_args ; $a += 1 ) {
				$this->last_error .= $op.$input[$a].$cl;
				$op = '[';
				$cl = ']';
				if( $input[$a] === $key ) {
					break;
				}
			}
			$this->last_error .= ' was already defined. Could not overwrite it with '.gettype($value).' "'.$value.'"';
		}
	}

	/**
	 * @function key_is_invalid() returns an error message to be used
	 *						 in an exception
	 * @param mixed $key	 the invalid key for dot_info::$content
	 * @param array $output  the branch of the dot_info::$content
	 *						 multi dimensional array the $key is
	 *						 supposed to apply to
	 * @param integer $index level of the branch the key is applies to
	 * @param array $indexes each level of the branch to be extracted
	 * @return string		 error message to be used in an exception
	 */
	protected function key_is_invalid( $key , $output , $index , $indexes , $exists = true ) {
		if( !is_string($key) && !is_numeric($key) ) {
			$msg = 'Cannot use '.gettype($key).' as ';
			if( $index === 0 ) {
				return $msg.'a property name of dot_info.';
			} else {
				return $msg.'an array index'.$this->get_requested_prop_var($index - 1 ,$indexes).' in dot_info::get_info()';
			}
		} elseif( trim($key) === '' ) {
			$msg = 'Cannot use empty string as ';
			if( $index === 0 ) {
				return $msg.'a property name of dot_info.';
			} else {
				return $msg.'an array index'.$this->get_requested_prop_var($index - 1 ,$indexes).' in dot_info::get_info()';
			}
		} elseif( $exists !== false && !isset($output[$key])) {
			return $this->get_requested_prop_var($index,$indexes).' is undefined';
			
		}
		return '';
	}

	protected function get_requested_prop_var($key,$indexes) {
		if( $key < 0 )
		{
			return '';
		}
		$msg = ' in dot_info::$';
		$wrap_open = '';
		$wrap_close = '';

		for( $a = 0 ; $a < count($indexes) ; $a += 1 )
		{
			if( $a > $key )
			{
				break;
			}
			$msg .= $wrap_open.$indexes[$a].$wrap_close;
			$wrap_open = '[';
			$wrap_close = ']';
		}
		if( $msg === ' in dot_info::$')
		{
			return '';
		}
		return $msg;
	}

	/**
	 * @function auto_settype() analyses a string value
	 *			 to see if it might be converted into a boolean, null,
	 *			 integer or float then converts it to that data type.
	 *
	 * NOTE: by default, dot_info__auto_settype() automatically
	 *		 un-escapes semi-colons ';' but will also un-escape single or
	 *		 double quotes (or any other character) if specified
	 *
	 * @param string $input string value who's type is to be checked
	 *			 (and possibly reset)
	 * @return mixed the most appropriate type the input could be. 
	 */
	protected function auto_settype( $input , $wrapper = '' ) {
		$input = trim($input);

		$tmp = strtolower($input);

		if( $tmp === 'true' ) {
			$input = true;
		}
		elseif( $tmp === 'false' ) {
			$input = false;
		}
		elseif( $tmp === 'null' ) {
			$input = null;
		}
		elseif( is_numeric($input) ) {
			if( is_float( $input / 1 ) ) {
				settype($input,'float');
			} elseif( substr($input,0,1) !== '0' && substr($input,0,2) !== '-0' ) {
				settype($input,'integer');
			}
		}
		else
		{
			if( is_string($wrapper) ) {
				$wrapper = trim($wrapper);
				if( $wrapper === '' ) {
					$wrapper = ';';
				}
				$input = str_replace( '\\'.$wrapper , $wrapper , $input );
			}
		}
		return $input;
	}


	/**
	 * @function EDI__array_merge() recursively merges two
	 *			 arrays, overwriting the existing value if the new value
	 *			 is different to the existing or if the new value is not
	 *			 an array
	 *
	 * This is an alternative to PHP's built in array_merge_recursive()
	 * function which is too permissive and has a bug
	 * 
	 * NOTE: Although, the result of this is like array_merge_recursive()
	 *		 it accepts non array values in the second parameter
	 *
	 * @param  array $old original array to be updated
	 * @param  mixed $new value to be checked and added to $old or to replace $old
	 * @return array with updated values.
	 */
	protected function EDI__array_merge($old,$new) {
		if( !is_array($new) ) {
			$this->updated = true;
			return $new;
		} else {
			foreach( $new as $key => $value ) {
				if( isset($old[$key]) ) {
					if( ( is_int($key) || $key === '[]' ) && !is_array($value) ) {
						$old[] = $value;
						$this->updated = true;
					} else {
						$old[$key] = $this->EDI__array_merge( $old[$key] , $value );	
					}
					$this->updated = true;
				} elseif( $key === '[]' ) {
					$old[] = $value;
					$this->updated = true;
				} else {
					$old[$key] = $value;
					$this->updated = true;
				}
			}
			return $old;
		}
	}


	/**
	 * @function EDI__array_merge_new_only() recursively merges two
	 *			 arrays, keeping the existing value if the new value
	 *			 is different to the existing or if the new value is not
	 *			 an array
	 *
	 * This is an alternative to PHP's built in array_merge_recursive()
	 * function which is too permissive and has a bug
	 * 
	 * NOTE: Although, the result of this is like PHP's array_merge_recursive()
	 *		 it accepts non array values in the second parameter
	 *
	 * @param  array $old original array to be updated
	 * @param  mixed $new value to be checked and added to $old or to replace $old
	 * @return array with updated values.
	 */
	protected function EDI__array_merge_new_only( $old , $new ) {
		if( !is_array($new) ) {
			return $old;
		} else {
			foreach( $new as $key => $value ) {
				if( isset($old[$key]) ) {
					if( is_array($value) ) {
						$old[$key] = $this->EDI__array_merge_new_only( $old[$key] , $value );
					}
					// ignore non array values
					$this->last_error = '[EXISTS]'.$key;
				} elseif( $key === '[]' ) {
					$old[] = $value;
					$this->updated = true;
				} else {
					$old[$key] = $value;
					$this->updated = true;
				}
			}
			return $old;
		}
	}



	protected function case_sensitive($input) {
		if( is_string($input) )
		{
			return trim($input);
		}
		return $input;
	}
	
	
	protected function make_lower_case($input) {
		if( is_string($input) )
		{
			return strtolower(trim($input));
		}
		return $input;
	}
	
	protected function fix_square($input , $escape ) {
		if( is_array($input) ) {
			foreach( $input as $key => $value ) {
				if( is_array($value) ) {
					$value = $this->fix_square($value , $escape );
				} else {
					$value = $this->auto_settype($value);
				}
				if( $key === '[]' ) {
					$input[] = $value;
				} else {
					$input[$key] = $value;
				}
			}
		}
		return $input;
	}
	
	protected function no_debug() { }
	protected function do_debug() {
		$input = func_get_args();
		array_unshift($input,'meta_level=2');
		call_user_func_array('debug', $input );
	}
	public function set_debug() { $this->debug = 'do_debug'; }
}